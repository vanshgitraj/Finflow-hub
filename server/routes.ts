import type { Express, Request, Response, NextFunction } from "express"; import { createServer, type Server } from "http"; import { storage } from "./storage"; import { insertLoanApplicationSchema, insertAgentSchema, insertContactMessageSchema, insertCibilRequestSchema } from "../shared/schema"; import { z } from "zod"; import { body, param, query, validationResult } from "express-validator"; import { authenticateAgent, generateToken, comparePassword, type AuthenticatedRequest } from "./auth";

const handleValidationErrors = (req: Request, res: Response, next: NextFunction) => { const errors = validationResult(req); if (!errors.isEmpty()) { return res.status(400).json({ message: "Validation error", errors: errors.array() }); } next(); };

export async function registerRoutes(app: Express): Promise<Server> { // Loan Application POST Route (Fully Updated to Match Schema) app.post("/api/loan-applications", [ body("fullName").isLength({ min: 2, max: 100 }), body("mobile").isMobilePhone("any"), body("email").isEmail(), body("panCard").matches(/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/), body("dateOfBirth").isISO8601(), body("gender").isIn(["male", "female", "other"]), body("currentAddress").isLength({ min: 5 }), body("employmentType").isString(), body("monthlyIncome").isNumeric(), body("companyName").isString(), body("workExperience").isString(), body("existingEmis").optional().isNumeric(), body("accountType").isString(), body("loanType").isString(), body("loanAmount").isNumeric(), body("tenure").isNumeric(), body("purpose").isString(), handleValidationErrors ], async (req, res) => { try { const validatedData = insertLoanApplicationSchema.parse(req.body); const application = await storage.createLoanApplication(validatedData); res.json({ success: true, applicationId: application.applicationId }); } catch (error) { if (error instanceof z.ZodError) { res.status(400).json({ message: "Validation error", errors: error.errors }); } else { console.error("Loan application error:", error); res.status(500).json({ message: "Internal server error" }); } } });

// Keep all other routes unchanged // ... (The rest of your existing GET/PATCH/contact/cibil routes)

const httpServer = createServer(app); return httpServer; }

